{"version":3,"file":"Navbar-Navbar-docs-mdx.iframe.bundle.js","mappingslrCA;;AACA;AACA;AAUA;AAIA;AAMA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;;;;;;;;;;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://uicomponents/./node_modules/@mdx-js/react/lib/index.js","webpack://uicomponents/./node_modules/@storybook/addon-docs/dist/index.mjs","webpack://uicomponents/./node_modules/@storybook/blocks/dist/ sync","webpack://uicomponents/./node_modules/@storybook/core/dist/components/ sync","webpack://uicomponents/./node_modules/@storybook/core/dist/theming/ sync","webpack://uicomponents/./src/Components/Navbar/Navbar.docs.mdx","webpack://uicomponents/./src/Components/Navbar/Navbar.stories.tsx","webpack://uicomponents/./src/Components/Navbar/Navbar.tsx"],"sourcesContent":["/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n","import { preview_exports } from './chunk-PRSJUHPQ.mjs';\nexport { DocsRenderer } from './chunk-NUUEMKO5.mjs';\nimport './chunk-H6MOWX77.mjs';\nimport { definePreview } from 'storybook/internal/preview-api';\nexport * from '@storybook/blocks';\n\nvar index_default=()=>definePreview(preview_exports);\n\nexport { index_default as default };\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@storybook/blocks/dist sync recursive\";\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@storybook/core/dist/components sync recursive\";\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@storybook/core/dist/theming sync recursive\";\nmodule.exports = webpackEmptyContext;","\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/surya/Documents/Opensource/UIComponents/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Canvas, Story, ArgsTable} from '@storybook/addon-docs';\nimport Navbar from './Navbar';\nimport {Default, CustomColors} from './Navbar.stories';\nfunction _createMdxContent(props) {\n  const _components = {\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"Components/Navbar\",\n      component: Navbar,\n      parameters: {\n        docs: {\n          description: {\n            component: 'A responsive top-of-page navbar built with `mdb-react-ui-kit` and `react-scroll`.'\n          }\n        }\n      }\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"navbar\",\n      children: \"Navbar\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"A simple, customizable navigation bar.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import Navbar from 'src/Components/Navbar/Navbar';\\n\\nfunction App() {\\n  return (\\n    <Navbar\\n      bgColor=\\\"#000\\\"\\n      linkColor=\\\"#fff\\\"\\n      data={['Home', 'About', 'Services', 'Contact']}\\n      brand={{ text: 'Surya', href: '/' }}\\n    />\\n  );\\n}\\n\"\n      })\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n","// src/Components/Navbar/Navbar.stories.tsx\nimport React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport Navbar from './Navbar';\nimport { NavbarProps } from './Navbar.types';\n\nconst meta: Meta<NavbarProps> = {\n  title: 'Components/Navbar',\n  component: Navbar,\n  argTypes: {\n    bgColor: { control: 'color', description: 'Background color of the navbar' },\n    linkColor: { control: 'color', description: 'Text/link color inside the navbar' },\n    data: { description: 'Array of link labels to render' },\n    brand: { control: 'object', description: 'Brand text and href for the navbar' },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<NavbarProps>;\n\nexport const Default: Story = {\n  args: {\n    bgColor: '#000000',\n    linkColor: '#ffffff',\n    data: ['Home', 'About', 'Services', 'Contact'],\n    brand: { text: 'Surya', href: '/' },\n  },\n};\n\nexport const CustomColors: Story = {\n  args: {\n    bgColor: '#1e90ff',\n    linkColor: '#ffff00',\n    data: ['One', 'Two', 'Three'],\n    brand: { text: 'MyBrand', href: '/home' },\n  },\n};\n","// src/Components/Navbar/Navbar.tsx\nimport React, { useState } from 'react';\nimport {\n  MDBNavbar,\n  MDBContainer,\n  MDBIcon,\n  MDBCollapse,\n  MDBNavbarBrand,\n  MDBNavbarToggler,\n  MDBNavbarItem,\n  MDBNavbarLink,\n} from 'mdb-react-ui-kit';\nimport { Link } from 'react-scroll';\nimport { NavbarProps } from './Navbar.types';\n\n\nconst Navbar: React.FC<NavbarProps> = ({\n  bgColor,\n  linkColor,\n  data,\n  brand,\n}) => {\n  const [showNav, setShowNav] = useState(false);\n  const toggleNavbar = () => setShowNav((s) => !s);\n\n  return (\n    <MDBNavbar expand=\"lg\" dark style={{ backgroundColor: bgColor }}>\n      <MDBContainer fluid>\n        <MDBNavbarBrand href={brand.href} style={{ color: linkColor }}>\n          {brand.text}\n        </MDBNavbarBrand>\n        <MDBNavbarToggler\n          onClick={toggleNavbar}\n          aria-label=\"Toggle navigation\"\n          aria-expanded={showNav}\n        >\n          <MDBIcon icon=\"bars\" fas style={{ color: linkColor }} />\n        </MDBNavbarToggler>\n        <MDBCollapse show={showNav} navbar>\n          <ul className=\"navbar-nav ms-auto\" role=\"menu\">\n            {data.map((label) => (\n              <MDBNavbarItem key={label} role=\"menuitem\">\n                <MDBNavbarLink>\n                  <Link\n                    to={label.toLowerCase()}\n                    smooth={false}\n                    duration={800}\n                    spy\n                    activeClass=\"active\"\n                    style={{ color: linkColor }}\n                  >\n                    {label}\n                  </Link>\n                </MDBNavbarLink>\n              </MDBNavbarItem>\n            ))}\n          </ul>\n        </MDBCollapse>\n      </MDBContainer>\n    </MDBNavbar>\n  );\n};\n\nexport default Navbar;"],"names":[],"sourceRoot":""}